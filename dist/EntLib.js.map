{"version":3,"sources":["Action.ts","Statements.ts","Parser.ts","Block.ts","IconFixer.ts","EventManager.ts","ProjectLoader.ts","Blocks.ts","Extension.ts","EventBlock.ts","Button.ts","Modal.ts","EntLib.ts"],"names":[],"mappings":"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,qBACA,kBACA,kBACA,kBACA,mBACA,mBAGR,CACgB,SAAA,OACF,OAAA,CACN,cACA,eACA,aACA,oBACA,cACA,MACA,UACA,kBACA,cACA,kBACA,mBACA,eACA,eACA,sBAGR,CACgB,SAAA,SACF,OAAA,CACN,iBACA,cACA,SACA,SACA,eACA,WACA,WACA,YACA,iBACA,SACA,qBACA,kBACA,qBACA,iBACA,8BACA,kBACA,qBACA,mBACA,kBAGR,CACgB,SAAA,QACF,OAAA,CACN,OACA,OACA,cACA,SACA,gBACA,uBACA,uBACA,oBACA,uBACA,oBACA,oBACA,iBACA,SACA,SACA,wBAGR,CACgB,SAAA,QACF,OAAA,CACN,cACA,gBACA,eACA,YACA,mBACA,mBACA,gBACA,4BACA,wBACA,oBAGR,CACgB,SAAA,OACF,OAAA,CACN,YACA,aACA,cACA,eACA,eAGR,CACgB,SAAA,QACF,OAAA,CACN,6BACA,oCACA,gBACA,kCACA,yCACA,yBACA,sBACA,mBACA,qBAGR,CACgB,SAAA,YACF,OAAA,CACN,aACA,oBACA,kBACA,yBACA,iBACA,gBAGR,CACgB,SAAA,OACF,OAAA,CACN,aACA,YACA,mBACA,oBACA,mBACA,mBACA,iBACA,0BACA,8BACA,4BACA,WACA,qBACA,qBACA,gBACA,mBACA,oBACA,UACA,YACA,kBACA,iBACA,uBAGR,CACgB,SAAA,WACF,OAAA,CACN,oBACA,gBACA,eACA,yBACA,qBACA,eACA,kBACA,eACA,gBACA,gBACA,2BACA,oBACA,yBACA,uBACA,0BACA,iBACA,sBACA,YACA,cAGR,CACgB,SAAA,OACF,OAAA,CACN,sBAGR,CACgB,SAAA,WACF,OAAA,CACN,uBACA,sBACA,sBACA,wBACA,uBACA,kBACA,uBACA,yBACA,mBACA,sBAGR,CACgB,SAAA,aACF,OAAA,CACN,0BACA,4BACA,cACA,mBACA,yBACA,2BACA,wBACA,YACA,YACA,4BACA,mBACA,kBACA,wBACA,iBACA,cACA,oBACA,qBACA,oBACA,kCACA,qBACA,qBA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","file":"EntLib.js","sourceRoot":"..\\src","sourcesContent":["export interface Parameter {\r\n    sender: {\r\n        entity: any\r\n        script: any\r\n    }\r\n    [key: string]: any\r\n}\r\nexport type Action = ({ sender }: Parameter) => any\r\nexport const executeAction = async (action: Action, entity: any, script: any, params: { [key: string]: any }) => {\r\n    try {\r\n        return await action({ sender: { entity, script }, ...params })\r\n    } catch (e) {\r\n        alert('확장블록에서 오류가 발생했습니다.\\n확장블록 개발자에게 문의해주세요.')\r\n        throw new Error()\r\n    }\r\n}","export class MultiStatementSkeleton {\r\n    public readonly executable = true\r\n\r\n    constructor(public readonly statements: number) {\r\n        if (this.statements < 3) throw new Error('statement length must be larger than 2')\r\n    }\r\n\r\n    public path(blockView: any) {\r\n        const width = Math.max(0, blockView.contentWidth + 2 - Math.max(30, blockView.contentHeight % 1000000 + 2) / 2)\r\n        const states = blockView._statements\r\n        const bw = width - 8\r\n\r\n        return `m 0 0\r\n                l 6 6\r\n                l 6 -6\r\n                h ${width}\r\n                a 14 14 0 0 1 0 28\r\n                H 26\r\n                l -6 6\r\n                l -6 -6\r\n                ${new Array(this.statements - 1).fill(null).map((_, i) => `v ${Math.max(states[i]?.height ?? 20, 20)}\r\n                l 6 6\r\n                l 6 -6\r\n                h ${bw - 6}\r\n                a 14 14 0 0 1 0 28\r\n                H 26\r\n                l -6 6\r\n                l -6 -6`).join('')}\r\n                v ${Math.max(states[this.statements - 1]?.height ?? 20, 20)}\r\n                l 6 6\r\n                l 6 -6\r\n                h ${bw}\r\n                a 7.5 7.5 0 0 1 0 15\r\n                H 12\r\n                l -6 6\r\n                l -6 -6\r\n                z`\r\n    }\r\n\r\n    public magnets(blockView: any) {\r\n        const contentHeight1 = Math.max(blockView.contentHeight % 1000000 + 2, 28)\r\n        const contentHeight2 = Math.max(Math.floor(blockView.contentHeight / 1000000) + 2, 28)\r\n        const states: any[] = blockView._statements\r\n        return {\r\n            previous: { x: 0, y: 0 },\r\n            next: {\r\n                x: 0,\r\n                y:\r\n                    states.slice(0, this.statements).reduce((acc, cur) => {\r\n                        acc += Math.max(cur.height ?? 20, 20)\r\n                        return acc\r\n                    }, 0) +\r\n                    contentHeight1 +\r\n                    contentHeight2 +\r\n                    43 + (28 * Math.max(0, this.statements - 3)) +\r\n                    blockView.offsetY\r\n            }\r\n        }\r\n    }\r\n\r\n    public box(blockView: any) {\r\n        const contentWidth = blockView.contentWidth\r\n        const contentHeight1 = Math.max(blockView.contentHeight % 1000000 + 2, 28)\r\n        const contentHeight2 = Math.max(Math.floor(blockView.contentHeight / 1000000) + 2, 28)\r\n        const states: any[] = blockView._statements\r\n        return {\r\n            topFieldHeight: contentHeight1,\r\n            offsetX: -8,\r\n            offsetY: 0,\r\n            width: contentWidth + 30,\r\n            height: contentHeight1 + contentHeight2 + states.slice(0, this.statements).reduce((acc, cur) => {\r\n                acc += Math.max(cur.height ?? 20, 20)\r\n                return acc\r\n            }, 0) + 45 + (15 * Math.max(0, this.statements - 3)),\r\n            marginBottom: 0\r\n        }\r\n    }\r\n\r\n    public statementPos(blockView: any) {\r\n        const getStatementHeight = (i: number) => Math.max(20, blockView._statements[i] ? blockView._statements[i].height % 1000000 : 20)\r\n        const heights: number[] = []\r\n        for (let i = 0; i < this.statements; i++) {\r\n            if (i == 0) heights.push(Math.max(30, (blockView.contentHeight % 1000000) + 2) + 1)\r\n            else heights.push(heights[i - 1] + Math.max(20, getStatementHeight(i - 1)) + Math.max(30, (blockView.contentHeight % 1000000) + 2) + 1)\r\n        }\r\n        return heights.map((l, i) => ({ x: 14, y: l - ((i + 1) * 3) }))\r\n    }\r\n\r\n    public contentPos(blockView: any) {\r\n        const height = Math.max(blockView.contentHeight % 1000000, 28)\r\n        return { x: 14, y: height / 2 }\r\n    }\r\n}","import { MultiStatementSkeleton } from \"./Statements\"\r\n\r\nexport class SyntaxTree {\r\n    public type: SyntaxCode\r\n    public content: (SyntaxTree | string)[]\r\n\r\n    constructor(type: SyntaxCode, content: (SyntaxTree | string)[]) {\r\n        this.type = type\r\n        this.content = content\r\n    }\r\n}\r\n\r\nexport enum IndicatorType {\r\n    EVENT,\r\n    DEFAULT\r\n}\r\n\r\nexport enum SyntaxCode {\r\n    BLOCK,\r\n    CONDITION,\r\n    PARAM,\r\n    TEXT,\r\n    DROPDOWN,\r\n    STATEMENT\r\n}\r\n\r\nexport interface BlockSyntax {\r\n    template: string\r\n    color: string\r\n    outerLine: string\r\n    skeleton: string\r\n    statements: any[]\r\n    params: any[]\r\n    events: { [key: string]: Function[] }\r\n    def: {\r\n        params: any[]\r\n        type: string\r\n    },\r\n    paramsKeyMap: { [key: string]: number }\r\n    statementsKeyMap: { [key: string]: number }\r\n    class: string\r\n    func: Function\r\n    event?: string\r\n}\r\n\r\nexport class Parser {\r\n    public parse(template: string, isParameter: boolean = false): SyntaxTree {\r\n        let templateType: SyntaxCode\r\n        let tree: SyntaxTree = null!\r\n        let retIndex: number = 0\r\n        let passCount: number = 0\r\n        let openedBracket: number = 1\r\n        let isDefaultValue: boolean = false\r\n        try {\r\n            template.split('').forEach((char, i, arr) => {\r\n                if (passCount > 0) return passCount--\r\n                if (i == 0) {\r\n                    if (char == '[') templateType = isParameter ? SyntaxCode.DROPDOWN : SyntaxCode.BLOCK\r\n                    else if (char == '(') templateType = SyntaxCode.PARAM\r\n                    else if (char == '<') templateType = SyntaxCode.CONDITION\r\n                    else if (char == '{') templateType = SyntaxCode.STATEMENT\r\n                    else templateType = SyntaxCode.TEXT\r\n                    tree = new SyntaxTree(templateType, [])\r\n                    if (templateType == SyntaxCode.TEXT) tree.content.push('') && (tree.content[tree.content.length - 1] += char)\r\n                    return\r\n                }\r\n                if (isParameter && ['[', '(', '<', '{'].includes(char)) openedBracket++\r\n                if ([']', ')', '>', '}'].includes(char)) openedBracket--\r\n                if (!isParameter && openedBracket < 1 && arr.length - 1 != i) throw new SyntaxError('Invalid Syntax: Multiple-Root-Brackets are not allowed.')\r\n                if (((arr.length - 1 == i) || (isParameter && [']', ')', '>', '}'].includes(char) && openedBracket == 0)) && templateType != SyntaxCode.TEXT) {\r\n                    if ((templateType == SyntaxCode.BLOCK || templateType == SyntaxCode.DROPDOWN) && char != ']') throw new SyntaxError('Invalid Syntax: Required \\']\\'')\r\n                    if (templateType == SyntaxCode.PARAM && char != ')') throw new SyntaxError('Invalid Syntax: Required \\')\\'')\r\n                    if (templateType == SyntaxCode.CONDITION && char != '>') throw new SyntaxError('Invalid Syntax: Required \\'>\\'')\r\n                    if (templateType == SyntaxCode.STATEMENT && char != '}') throw new SyntaxError('Invalid Syntax: Required \\'}\\'')\r\n                    retIndex = i\r\n                    throw 'break'\r\n                }\r\n                if (isParameter || templateType == SyntaxCode.TEXT ? true : !['[', '(', '<', '{'].includes(char)) {\r\n                    if (typeof tree.content[tree.content.length - 1] != 'string') tree.content.push('')\r\n                    if (isParameter) {\r\n                        if (char == ':' && templateType != SyntaxCode.STATEMENT) {\r\n                            tree.content.push('')\r\n                            isDefaultValue = true\r\n                        } else if (isDefaultValue ? char != ' ' : true) {\r\n                            if (templateType != SyntaxCode.DROPDOWN) {\r\n                                tree.content[tree.content.length - 1] += char\r\n                            } else {\r\n                                if (isDefaultValue) {\r\n                                    tree.content[tree.content.length - 1] = (char == '@').toString()\r\n                                    tree.content.push(char == '@' ? '' : char)\r\n                                } else {\r\n                                    if (tree.content[1] == 'true' && char != '@') {\r\n                                        tree.content[tree.content.length - 1] += char\r\n                                    } else {\r\n                                        if (char == '=' || char == ',') tree.content.push('')\r\n                                        else tree.content[tree.content.length - 1] += char\r\n                                    }\r\n                                }\r\n                            }\r\n                            isDefaultValue = false\r\n                        }\r\n                    } else {\r\n                        tree.content[tree.content.length - 1] += char\r\n                    }\r\n                } else if (!isParameter) {\r\n                    const parsed = <any> this.parse(template.substring(i), true)\r\n                    passCount = parsed.len\r\n                    tree.content.push(parsed.tree)\r\n                }\r\n            })\r\n        } catch (e) {\r\n            if (e != 'break') throw e\r\n        }\r\n        if (isParameter) return <any> { tree, len: retIndex }\r\n        else return <any> tree\r\n    }\r\n\r\n    public syntaxTreeToBlock({ name, className, color, outline, action, darkenColor, indicator, indicatorType = IndicatorType.DEFAULT, event }: {\r\n        name: string\r\n        className: string\r\n        color: string\r\n        outline: string,\r\n        action: Function\r\n        darkenColor: string\r\n        indicator?: string\r\n        indicatorType?: IndicatorType\r\n        event?: string\r\n    }, tree: SyntaxTree) {\r\n        switch (tree.type) {\r\n            case SyntaxCode.TEXT: {\r\n                const base: BlockSyntax = {\r\n                    template: '%1',\r\n                    color: 'transparent',\r\n                    outerLine: 'transparent',\r\n                    skeleton: 'basic_text',\r\n                    statements: [],\r\n                    params: [{\r\n                        type: 'Text',\r\n                        text: tree.content[0],\r\n                        color: typeof EntryStatic != 'undefined' ? EntryStatic.colorSet.common.TEXT : '#333',\r\n                        class: 'bold',\r\n                        align: 'center'\r\n                    }],\r\n                    events: {},\r\n                    def: {\r\n                        params: [null],\r\n                        type: name\r\n                    },\r\n                    paramsKeyMap: {},\r\n                    statementsKeyMap: {},\r\n                    class: className,\r\n                    func: action\r\n                }\r\n                return { base, neededDynamicDropdown: [], customSkeletons: {} }\r\n            }\r\n            case SyntaxCode.CONDITION:\r\n            case SyntaxCode.PARAM:\r\n            case SyntaxCode.BLOCK: {\r\n                const base: BlockSyntax = {\r\n                    template: '',\r\n                    color,\r\n                    outerLine: outline,\r\n                    skeleton: event ? 'basic_event' : ({\r\n                        [SyntaxCode.BLOCK]: 'basic',\r\n                        [SyntaxCode.CONDITION]: 'basic_boolean_field',\r\n                        [SyntaxCode.PARAM]: 'basic_string_field'\r\n                    })[tree.type],\r\n                    statements: [],\r\n                    params: [],\r\n                    events: {},\r\n                    def: {\r\n                        params: [],\r\n                        type: name\r\n                    },\r\n                    paramsKeyMap: {},\r\n                    statementsKeyMap: {},\r\n                    class: className,\r\n                    func: action\r\n                }\r\n                if (event) base.event = event\r\n                const neededDynamicDropdown: string[] = []\r\n                const customSkeletons: { [key: string]: MultiStatementSkeleton } = {}\r\n                let paramCount = 0\r\n                let lineBreakCount = 0\r\n                let indicatorGenerated = false\r\n                if (indicator && indicatorType == IndicatorType.EVENT) {\r\n                    base.template += `%${++paramCount}`\r\n                    base.params.push({\r\n                        type: 'Indicator',\r\n                        img: indicator,\r\n                        size: 14,\r\n                        position: { x: 0, y: -2 }\r\n                    })\r\n                    base.def.params.push(null)\r\n                }\r\n                tree.content.forEach(content => {\r\n                    if (typeof content == 'string') {\r\n                        base.template += content\r\n                    } else {\r\n                        base.template += `%${++paramCount}`\r\n                        if (content.content.length >= 2) {\r\n                            if (content.type == SyntaxCode.PARAM) {\r\n                                base.params.push({\r\n                                    type: 'Block',\r\n                                    accept: 'string'\r\n                                })\r\n                                base.def.params.push({\r\n                                    type: 'text',\r\n                                    params: [content.content[1]]\r\n                                })\r\n                                base.paramsKeyMap[(<string> content.content[0]).toUpperCase().trim()] = paramCount - 1\r\n                            } else if (content.type == SyntaxCode.CONDITION) {\r\n                                base.params.push({\r\n                                    type: 'Block',\r\n                                    accept: 'boolean'\r\n                                })\r\n                                base.def.params.push({\r\n                                    type: (<string> content.content[1]).toLowerCase().trim() == 'true' ? 'True' : 'False',\r\n                                })\r\n                                base.paramsKeyMap[(<string> content.content[0]).toUpperCase().trim()] = paramCount - 1\r\n                            } else if (content.type == SyntaxCode.DROPDOWN) {\r\n                                const dropdown = {\r\n                                    key: (<string> content.content[0]).trim(),\r\n                                    isDynamic: content.content[1] == 'true',\r\n                                    map: <[string, string][]>(content.content[1] != 'true' ? content.content.slice(2).reduce((acc, cur, i, arr) => {\r\n                                        if (!(acc[acc.length - 1] instanceof Array)) acc.push([])\r\n                                        acc[acc.length - 1].push(<string> cur)\r\n                                        if (i % 2 == 1 && i != arr.length - 1) acc.push([])\r\n                                        return acc\r\n                                    }, <string[][]>[]).map(l => {\r\n                                        const arr = [l[0], l[1]]\r\n                                        const temp = arr[0]\r\n                                        arr[0] = arr[1]\r\n                                        arr[1] = temp\r\n                                        return arr\r\n                                    }) : []),\r\n                                    menuName: content.content[1] == 'true' ? content.content[2] as string : null\r\n                                }\r\n                                if (!dropdown.isDynamic) {\r\n                                    base.params.push({\r\n                                        type: \"Dropdown\",\r\n                                        options: dropdown.map,\r\n                                        fontSize: 11,\r\n                                        value: dropdown.map[0][1],\r\n                                        bgColor: darkenColor,\r\n                                        arrowColor: '#ffffff'\r\n                                    })\r\n                                    base.def.params.push(null)\r\n                                } else {\r\n                                    const menuName = <string> dropdown.menuName?.toLowerCase()\r\n                                    base.params.push({\r\n                                        type: \"DropdownDynamic\",\r\n                                        menuName,\r\n                                        fontSize: 11,\r\n                                        value: null,\r\n                                        bgColor: darkenColor,\r\n                                        arrowColor: '#ffffff'\r\n                                    })\r\n                                    if (![\r\n                                        \"sprites\",\r\n                                        \"allSprites\",\r\n                                        \"spritesWithMouse\",\r\n                                        \"spritesWithSelf\",\r\n                                        \"textBoxWithSelf\",\r\n                                        \"collision\",\r\n                                        \"pictures\",\r\n                                        \"messages\",\r\n                                        \"variables\",\r\n                                        \"lists\",\r\n                                        \"tables\",\r\n                                        \"scenes\",\r\n                                        \"sounds\",\r\n                                        \"clone\",\r\n                                        \"objectSequence\",\r\n                                        \"fonts\"\r\n                                    ].includes(menuName)) neededDynamicDropdown.push(menuName)\r\n                                    base.def.params.push(null)\r\n                                }\r\n                                base.paramsKeyMap[dropdown.key.toUpperCase()] = paramCount - 1\r\n                            }\r\n                        } else if (content.content.length == 1) {\r\n                            if (content.type == SyntaxCode.PARAM) {\r\n                                base.params.push({\r\n                                    type: 'Block',\r\n                                    accept: 'string'\r\n                                })\r\n                                base.def.params.push({\r\n                                    type: 'text',\r\n                                    params: [content.content[0]]\r\n                                })\r\n                            } else if (content.type == SyntaxCode.CONDITION) {\r\n                                base.params.push({\r\n                                    type: 'Block',\r\n                                    accept: 'boolean'\r\n                                })\r\n                                base.def.params.push({\r\n                                    type: (<string> content.content[0]).toLowerCase().trim() == 'true' ? 'True' : 'False',\r\n                                })\r\n                            } else if (content.type == SyntaxCode.STATEMENT) {\r\n                                const statementCount = tree.content.filter((content: any) => content.type == SyntaxCode.STATEMENT).length\r\n                                if (statementCount > 1 && lineBreakCount < statementCount - 1) {\r\n                                    if (!indicatorGenerated) {\r\n                                        base.template += ` %${++paramCount}`\r\n                                        base.params.push({\r\n                                            type: 'Indicator',\r\n                                            img: indicator,\r\n                                            size: 11\r\n                                        })\r\n                                        base.def.params.push(null)\r\n                                        base.statementsKeyMap[(content.content[0] as string).toUpperCase().trim()] = paramCount - 2\r\n                                        indicatorGenerated = true\r\n                                    } else {\r\n                                        base.statementsKeyMap[(content.content[0] as string).toUpperCase().trim()] = paramCount - 1\r\n                                    }\r\n                                    base.params.push({\r\n                                        type: 'LineBreak'\r\n                                    })\r\n                                    lineBreakCount++\r\n                                } else {\r\n                                    base.template = base.template.slice(0, (1 + paramCount.toString().length) * -1)\r\n                                    paramCount--\r\n                                    if (!indicatorGenerated) {\r\n                                        base.template += ` %${++paramCount}`\r\n                                        base.params.push({\r\n                                            type: 'Indicator',\r\n                                            img: indicator,\r\n                                            size: 11\r\n                                        })\r\n                                        base.def.params.push(null)\r\n                                        base.statementsKeyMap[(content.content[0] as string).toUpperCase().trim()] = paramCount - 2\r\n                                        indicatorGenerated = true\r\n                                    } else {\r\n                                        base.statementsKeyMap[(content.content[0] as string).toUpperCase().trim()] = paramCount - 1\r\n                                    }\r\n                                }\r\n                                if (statementCount == 1) base.skeleton = 'basic_loop'\r\n                                else if (statementCount == 2) base.skeleton = 'basic_double_loop'\r\n                                base.statements.push({ accept: 'basic' })\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                const statementCount = tree.content.filter((content: any) => content.type == SyntaxCode.STATEMENT).length\r\n                if (indicator && indicatorType == IndicatorType.DEFAULT && statementCount == 0 && tree.type == SyntaxCode.BLOCK) {\r\n                    base.template += ` %${++paramCount}`\r\n                    base.params.push({\r\n                        type: 'Indicator',\r\n                        img: indicator,\r\n                        size: 11\r\n                    })\r\n                    base.def.params.push(null)\r\n                }\r\n                if (statementCount > 2) {\r\n                    const id = Math.random().toString(36).substr(2, 4)\r\n                    base.skeleton = id\r\n                    customSkeletons[id] = new MultiStatementSkeleton(statementCount)\r\n                }\r\n                return { base, neededDynamicDropdown, customSkeletons }\r\n            }\r\n            default: {\r\n                const base: BlockSyntax = {\r\n                    template: '%1',\r\n                    color: 'transparent',\r\n                    outerLine: 'transparent',\r\n                    skeleton: 'basic_text',\r\n                    statements: [],\r\n                    params: [{\r\n                        type: 'Text',\r\n                        text: 'Error',\r\n                        color: '#ff0000',\r\n                        class: 'bold',\r\n                        align: 'center'\r\n                    }],\r\n                    events: {},\r\n                    def: {\r\n                        params: [null],\r\n                        type: name\r\n                    },\r\n                    paramsKeyMap: {},\r\n                    statementsKeyMap: {},\r\n                    class: className,\r\n                    func: action\r\n                }\r\n                return { base, neededDynamicDropdown: [], customSkeletons: {} }\r\n            }\r\n        }\r\n    }\r\n\r\n    public parseButton({ textColor, text, align, action, name, className }: {\r\n        textColor: string\r\n        text: string\r\n        align: 'center' | 'right' | 'left'\r\n        action: Function\r\n        name: string\r\n        className: string\r\n    }) {\r\n        const base: BlockSyntax = {\r\n            template: '%1',\r\n            color: '#eee',\r\n            skeleton: 'basic_button',\r\n            params: [{\r\n                type: 'Text',\r\n                text,\r\n                align,\r\n                color: textColor\r\n            }],\r\n            events: { mousedown: [action] },\r\n            def: {\r\n                params: [null],\r\n                type: name\r\n            },\r\n            func: null!,\r\n            class: null!,\r\n            outerLine: null!,\r\n            statements: null!,\r\n            paramsKeyMap: null!,\r\n            statementsKeyMap: null!\r\n        }\r\n\r\n        return {\r\n            base, neededDynamicDropdown: [], customSkeletons: {}\r\n        }\r\n    }\r\n\r\n    public static parse(template: string) {\r\n        return new Parser().parse(template)\r\n    }\r\n}","import { Action, executeAction } from \"./Action\"\r\nimport { IndicatorType, Parser, SyntaxCode, SyntaxTree } from './Parser'\r\n\r\nexport interface BlockParam {\r\n    template: string\r\n    className?: string\r\n    color?: string\r\n    darkenColor?: string\r\n    action: Action\r\n    dynamics?: { [key: string]: any }\r\n    indicator?: string\r\n}\r\n\r\nexport class Block {\r\n    public template: string\r\n    public action: Action\r\n    public className: string\r\n    public color: string\r\n    public darkenColor: string\r\n    public indicator: string\r\n    public dynamics: { [key: string]: any }\r\n\r\n    constructor({\r\n        template,\r\n        color = 'default',\r\n        darkenColor = 'default',\r\n        className = 'default',\r\n        action,\r\n        dynamics = {},\r\n        indicator = 'default'\r\n    }: BlockParam) {\r\n        this.template = template\r\n        this.color = color\r\n        this.darkenColor = darkenColor\r\n        this.action = action\r\n        this.className = className\r\n        this.dynamics = dynamics\r\n        this.indicator = indicator\r\n    }\r\n\r\n    public export(parser: Parser, name: string) {\r\n        const syntaxTree = parser.parse(this.template)\r\n        const params = <SyntaxTree[]> syntaxTree.content.filter(l => typeof l != 'string')\r\n        const getParams = (script: any) => params.reduce((acc, cur) => {\r\n            const keyName = <string> cur.content[0]\r\n            if (cur.type == SyntaxCode.CONDITION) acc[keyName] = script.getBooleanValue(keyName.toUpperCase(), script)\r\n            if (cur.type == SyntaxCode.DROPDOWN) acc[keyName] = script.getField(keyName.toUpperCase(), script)\r\n            if (cur.type == SyntaxCode.PARAM) acc[keyName] = script.getStringValue(keyName.toUpperCase(), script)\r\n            return acc\r\n        }, <{ [key: string]: any }> {})\r\n        const ret = parser.syntaxTreeToBlock({\r\n            name,\r\n            className: this.className,\r\n            color: this.color,\r\n            outline: this.darkenColor,\r\n            darkenColor: this.darkenColor,\r\n            action: async (entity: any, script: any) => {\r\n                return await executeAction(this.action, entity, script, getParams(script))\r\n            },\r\n            indicator: this.indicator == 'none' ? undefined : this.indicator,\r\n            indicatorType: IndicatorType.DEFAULT\r\n        }, syntaxTree)\r\n        return {\r\n            ...ret,\r\n            dynamics: Object.keys(this.dynamics).reduce((acc, cur) => {\r\n                acc[cur.toLowerCase()] = this.dynamics[cur]\r\n                return acc\r\n            }, <{ [key: string]: any }> {})\r\n        }\r\n    }\r\n}","export namespace IconFixer {\r\n    export let running: boolean = false\r\n\r\n    export const run = () => {\r\n        Object.keys(Entry.Command).forEach(l => {\r\n            if (Entry.Command[l].do) {\r\n                Entry.Command[l].do = new Proxy(Entry.Command[l].do, {\r\n                    apply(target, thisArg, args) {\r\n                        const id = setInterval(() => {\r\n                            const findedObjects = Array.from(document.querySelectorAll('image')).filter(l => l.getAttribute('href')?.startsWith('/lib/entry-js/images/https://'))\r\n                            findedObjects.forEach(l => l.setAttribute('href', l.getAttribute('href')?.replace('/lib/entry-js/images/', '') || ''))\r\n                        }, 50)\r\n                        setTimeout(() => {\r\n                            clearInterval(id)\r\n                        }, 1000)\r\n                        return target.apply(thisArg, args)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        setInterval(() => {\r\n            const findedObjects = Array.from(document.querySelectorAll('image')).filter(l => l.getAttribute('href')?.startsWith('/lib/entry-js/images/https://'))\r\n            findedObjects.forEach(l => l.setAttribute('href', l.getAttribute('href')?.replace('/lib/entry-js/images/', '') || ''))\r\n        }, 100)\r\n        running = true\r\n    }\r\n}","export namespace EventManager {\r\n    export const fire = (eventName: string) => {\r\n        if (!running) throw new Error('Not Running')\r\n        Entry.engine.fireEvent(eventName)\r\n    }\r\n\r\n    export let running = false\r\n    export const run = () => {\r\n        if (running) throw new Error('Already Running')\r\n        const scripts = Entry.container.getAllObjects().map((l: any) => Object.values(l.script._blockMap)).flat()\r\n        scripts.forEach((thread: any) => {\r\n            if (!Entry.block[thread.type].event) return\r\n            const eventMap = thread.thread.parent.object.script._eventMap\r\n            eventMap[Entry.block[thread.type].event] ||= []\r\n            if (!eventMap[Entry.block[thread.type].event].includes(thread)) eventMap[Entry.block[thread.type].event].push(thread)\r\n        })\r\n        running = true\r\n    }\r\n}","export namespace ProjectLoader {\r\n    export let running = false\r\n    export const run = async () => {\r\n        const exportedProject = Entry.exportProject()\r\n        const projectData = await (await fetch(`https://playentry.org/graphql`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                query: \"\\n    query($id: ID! $groupId: ID) {\\n        project(id: $id, groupId: $groupId) {\\n            \\n    id\\n    name\\n    user {\\n        \\n    id\\n    nickname\\n    username\\n    profileImage {\\n        \\n    id\\n    name\\n    label {\\n        \\n    ko\\n    en\\n    ja\\n    vn\\n\\n    }\\n    filename\\n    imageType\\n    dimension {\\n        \\n    width\\n    height\\n\\n    }\\n    trimmed {\\n        filename\\n        width\\n        height\\n    }\\n\\n    }\\n    status {\\n        following\\n        follower\\n    }\\n    description\\n    role\\n\\n    }\\n    visit\\n    speed\\n    objects\\n    variables\\n    messages\\n    functions\\n    tables\\n    scenes\\n    thumb\\n    isopen\\n    blamed\\n    isPracticalCourse\\n    category\\n    categoryCode\\n    created\\n    updated\\n    shortenUrl\\n    parent {\\n        id\\n        name\\n        user {\\n            id\\n            username\\n            nickname\\n        }\\n    }\\n    likeCnt\\n    favorite\\n    special\\n    isForLecture\\n    isForStudy\\n    isForSubmit\\n    hashId\\n    complexity\\n    staffPicked\\n    ranked\\n    submitId {\\n        id\\n    }\\n    description\\n    description2\\n    description3\\n    hasRealTimeVariable\\n    realTimeVariable {\\n        \\n    variableType\\n    key\\n    value\\n    array {\\n        key\\n        data\\n    }\\n    minValue\\n    maxValue\\n    visible\\n    x\\n    y\\n    width\\n    height\\n    object\\n\\n    }\\n    commentGroup {\\n        group\\n        count\\n    }\\n    likeCntGroup {\\n        group\\n        count\\n    }\\n    visitGroup {\\n        group\\n        count\\n    }\\n    recentGroup {\\n        group\\n        count\\n    }\\n    learning\\n    expansionBlocks\\n    aiUtilizeBlocks\\n\\n        }\\n     }\\n\",\r\n                variables: { id: Entry.projectId }\r\n            }),\r\n            headers: new Headers({\r\n                'content-type': 'application/json'\r\n            })\r\n        })).json()\r\n        Entry.clearProject()\r\n        Entry.loadProject(Object.keys(exportedProject).reduce((acc, cur) => {\r\n            acc[cur] = projectData.data.project[cur]\r\n            return acc\r\n        }, <any> {}))\r\n    }\r\n}","export default [\r\n    {\r\n        \"category\": \"start\",\r\n        \"blocks\": [\r\n            \"when_run_button_click\",\r\n            \"when_some_key_pressed\",\r\n            \"mouse_clicked\",\r\n            \"mouse_click_cancled\",\r\n            \"when_object_click\",\r\n            \"when_object_click_canceled\",\r\n            \"when_message_cast\",\r\n            \"message_cast\",\r\n            \"message_cast_wait\",\r\n            \"when_scene_start\",\r\n            \"start_scene\",\r\n            \"start_neighbor_scene\",\r\n            \"check_object_property\",\r\n            \"check_block_execution\",\r\n            \"switch_scope\",\r\n            \"is_answer_submited\",\r\n            \"check_lecture_goal\",\r\n            \"check_variable_by_name\",\r\n            \"show_prompt\",\r\n            \"check_goal_success\",\r\n            \"positive_number\",\r\n            \"negative_number\",\r\n            \"wildcard_string\",\r\n            \"wildcard_boolean\",\r\n            \"register_score\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"flow\",\r\n        \"blocks\": [\r\n            \"wait_second\",\r\n            \"repeat_basic\",\r\n            \"repeat_inf\",\r\n            \"repeat_while_true\",\r\n            \"stop_repeat\",\r\n            \"_if\",\r\n            \"if_else\",\r\n            \"wait_until_true\",\r\n            \"stop_object\",\r\n            \"restart_project\",\r\n            \"when_clone_start\",\r\n            \"create_clone\",\r\n            \"delete_clone\",\r\n            \"remove_all_clones\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"moving\",\r\n        \"blocks\": [\r\n            \"move_direction\",\r\n            \"bounce_wall\",\r\n            \"move_x\",\r\n            \"move_y\",\r\n            \"move_xy_time\",\r\n            \"locate_x\",\r\n            \"locate_y\",\r\n            \"locate_xy\",\r\n            \"locate_xy_time\",\r\n            \"locate\",\r\n            \"locate_object_time\",\r\n            \"rotate_relative\",\r\n            \"direction_relative\",\r\n            \"rotate_by_time\",\r\n            \"direction_relative_duration\",\r\n            \"rotate_absolute\",\r\n            \"direction_absolute\",\r\n            \"see_angle_object\",\r\n            \"move_to_angle\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"looks\",\r\n        \"blocks\": [\r\n            \"show\",\r\n            \"hide\",\r\n            \"dialog_time\",\r\n            \"dialog\",\r\n            \"remove_dialog\",\r\n            \"change_to_some_shape\",\r\n            \"change_to_next_shape\",\r\n            \"add_effect_amount\",\r\n            \"change_effect_amount\",\r\n            \"erase_all_effects\",\r\n            \"change_scale_size\",\r\n            \"set_scale_size\",\r\n            \"flip_x\",\r\n            \"flip_y\",\r\n            \"change_object_index\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"brush\",\r\n        \"blocks\": [\r\n            \"brush_stamp\",\r\n            \"start_drawing\",\r\n            \"stop_drawing\",\r\n            \"set_color\",\r\n            \"set_random_color\",\r\n            \"change_thickness\",\r\n            \"set_thickness\",\r\n            \"change_brush_transparency\",\r\n            \"set_brush_tranparency\",\r\n            \"brush_erase_all\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"text\",\r\n        \"blocks\": [\r\n            \"text_read\",\r\n            \"text_write\",\r\n            \"text_append\",\r\n            \"text_prepend\",\r\n            \"text_flush\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"sound\",\r\n        \"blocks\": [\r\n            \"sound_something_with_block\",\r\n            \"sound_something_second_with_block\",\r\n            \"sound_from_to\",\r\n            \"sound_something_wait_with_block\",\r\n            \"sound_something_second_wait_with_block\",\r\n            \"sound_from_to_and_wait\",\r\n            \"sound_volume_change\",\r\n            \"sound_volume_set\",\r\n            \"sound_silent_all\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"judgement\",\r\n        \"blocks\": [\r\n            \"is_clicked\",\r\n            \"is_press_some_key\",\r\n            \"reach_something\",\r\n            \"boolean_basic_operator\",\r\n            \"boolean_and_or\",\r\n            \"boolean_not\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"calc\",\r\n        \"blocks\": [\r\n            \"calc_basic\",\r\n            \"calc_rand\",\r\n            \"coordinate_mouse\",\r\n            \"coordinate_object\",\r\n            \"get_sound_volume\",\r\n            \"quotient_and_mod\",\r\n            \"calc_operation\",\r\n            \"get_project_timer_value\",\r\n            \"choose_project_timer_action\",\r\n            \"set_visible_project_timer\",\r\n            \"get_date\",\r\n            \"distance_something\",\r\n            \"get_sound_duration\",\r\n            \"get_user_name\",\r\n            \"length_of_string\",\r\n            \"combine_something\",\r\n            \"char_at\",\r\n            \"substring\",\r\n            \"index_of_string\",\r\n            \"replace_string\",\r\n            \"change_string_case\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"variable\",\r\n        \"blocks\": [\r\n            \"variableAddButton\",\r\n            \"listAddButton\",\r\n            \"ask_and_wait\",\r\n            \"get_canvas_input_value\",\r\n            \"set_visible_answer\",\r\n            \"get_variable\",\r\n            \"change_variable\",\r\n            \"set_variable\",\r\n            \"show_variable\",\r\n            \"hide_variable\",\r\n            \"value_of_index_from_list\",\r\n            \"add_value_to_list\",\r\n            \"remove_value_from_list\",\r\n            \"insert_value_to_list\",\r\n            \"change_value_list_index\",\r\n            \"length_of_list\",\r\n            \"is_included_in_list\",\r\n            \"show_list\",\r\n            \"hide_list\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"func\",\r\n        \"blocks\": [\r\n            \"functionAddButton\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"analysis\",\r\n        \"blocks\": [\r\n            \"analizyDataAddButton\",\r\n            \"append_row_to_table\",\r\n            \"insert_row_to_table\",\r\n            \"delete_row_from_table\",\r\n            \"set_value_from_table\",\r\n            \"get_table_count\",\r\n            \"get_value_from_table\",\r\n            \"calc_values_from_table\",\r\n            \"open_table_chart\",\r\n            \"close_table_chart\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"ai_utilize\",\r\n        \"blocks\": [\r\n            \"aiUtilizeBlockAddButton\",\r\n            \"aiUtilizeModelTrainButton\",\r\n            \"audio_title\",\r\n            \"check_microphone\",\r\n            \"speech_to_text_convert\",\r\n            \"speech_to_text_get_value\",\r\n            \"get_microphone_volume\",\r\n            \"tts_title\",\r\n            \"read_text\",\r\n            \"read_text_wait_with_block\",\r\n            \"set_tts_property\",\r\n            \"translate_title\",\r\n            \"get_translated_string\",\r\n            \"check_language\",\r\n            \"video_title\",\r\n            \"video_draw_webcam\",\r\n            \"video_check_webcam\",\r\n            \"video_flip_camera\",\r\n            \"video_set_camera_opacity_option\",\r\n            \"video_motion_value\",\r\n            \"video_toggle_model\",\r\n            \"video_is_model_loaded\",\r\n            \"video_number_detect\",\r\n            \"video_toggle_ind\",\r\n            \"video_body_part_coord\",\r\n            \"video_face_part_coord\",\r\n            \"video_detected_face_info\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"expansion\",\r\n        \"blocks\": [\r\n            \"expansionBlockAddButton\",\r\n            \"weather_title\",\r\n            \"check_weather\",\r\n            \"check_finedust\",\r\n            \"get_weather_data\",\r\n            \"get_current_weather_data\",\r\n            \"get_today_temperature\",\r\n            \"check_city_weather\",\r\n            \"check_city_finedust\",\r\n            \"get_city_weather_data\",\r\n            \"get_current_city_weather_data\",\r\n            \"get_today_city_temperature\",\r\n            \"festival_title\",\r\n            \"count_festival\",\r\n            \"get_festival_info\",\r\n            \"behaviorConductDisaster_title\",\r\n            \"count_disaster_behavior\",\r\n            \"get_disaster_behavior\",\r\n            \"behaviorConductLifeSafety_title\",\r\n            \"count_lifeSafety_behavior\",\r\n            \"get_lifeSafety_behavior\"\r\n        ]\r\n    },\r\n    {\r\n        \"category\": \"arduino\",\r\n        \"blocks\": [\r\n            \"arduino_reconnect\",\r\n            \"arduino_open\",\r\n            \"arduino_cloud_pc_open\",\r\n            \"arduino_connect\",\r\n            \"arduino_download_connector\",\r\n            \"download_guide\",\r\n            \"arduino_download_source\",\r\n            \"arduino_noti\"\r\n        ].concat(EntryStatic.DynamicHardwareBlocks)\r\n    }\r\n]","import { Block } from './Block'\r\nimport { Parser } from './Parser'\r\nimport { IconFixer } from './IconFixer'\r\nimport { EventManager } from './EventManager'\r\nimport { ProjectLoader } from './ProjectLoader'\r\nimport blocks from './Blocks'\r\n\r\nEntryStatic._getAllBlocks = EntryStatic.getAllBlocks\r\n\r\nEntryStatic.getAllBlocks = () => {\r\n    const b = JSON.parse(JSON.stringify(blocks)) as typeof blocks\r\n    Array.from(extensions).forEach(extension => {\r\n        b.push({\r\n            category: extension.id,\r\n            blocks: Object.keys(extension.blocks)\r\n        })\r\n    })\r\n    return b\r\n}\r\n\r\ninterface ExtensionParam {\r\n    displayName?: string\r\n    blocks?: { [key: string]: Block }\r\n    enabledIcon?: string\r\n    disabledIcon?: string\r\n    enabledColor?: string\r\n    disabledColor?: string\r\n    defaultColor?: string\r\n    defaultDarkenColor?: string\r\n    defaultIndicator?: string\r\n}\r\n\r\nexport const extensions: Set<Extension> = new Set<Extension>()\r\n\r\nexport const neededDynamicDropdowns: { [key: string]: () => [string, string][] } = {}\r\n\r\nexport class Extension {\r\n    public readonly id: string\r\n    public displayName: string\r\n    public blocks: { [key: string]: Block }\r\n    public enabledIcon: string\r\n    public disabledIcon: string\r\n    public enabledColor: string\r\n    public disabledColor: string\r\n    public disabled: boolean = true\r\n    public defaultColor: string\r\n    public defaultDarkenColor: string\r\n    public defaultIndicator: string\r\n\r\n    constructor({\r\n        displayName = '확장블록',\r\n        blocks = {},\r\n        enabledIcon = 'https://playentry.org/lib/entry-js/images/hardware_on.svg',\r\n        disabledIcon = 'https://playentry.org/lib/entry-js/images/hardware.svg',\r\n        enabledColor = '#00b6b1',\r\n        disabledColor = 'transparent',\r\n        defaultColor = '#00b6b1',\r\n        defaultDarkenColor = '#008380',\r\n        defaultIndicator = 'https://playentry.org/lib/entry-js/images/block_icon/hardware_icon.svg'\r\n    }: ExtensionParam) {\r\n        this.displayName = displayName\r\n        this.blocks = blocks\r\n        this.enabledIcon = enabledIcon\r\n        this.disabledIcon = disabledIcon\r\n        this.enabledColor = enabledColor\r\n        this.disabledColor = disabledColor\r\n        this.defaultColor = defaultColor\r\n        this.defaultDarkenColor = defaultDarkenColor\r\n        this.defaultIndicator = defaultIndicator\r\n        this.id = Entry.Utils.generateId()\r\n    }\r\n\r\n    public enable() {\r\n        if (!this.disabled) throw new Error('Already Enabled')\r\n        extensions.add(this)\r\n        this.apply()\r\n        this.disabled = false\r\n    }\r\n\r\n    public disable() {\r\n        if (this.disabled) throw new Error('Disabled Extension')\r\n        extensions.delete(this)\r\n        this.disabled = true\r\n    }\r\n\r\n    protected apply() {\r\n        const parser = new Parser()\r\n        const exportedBlocks = Object.keys(this.blocks).map(key => {\r\n            const block = this.blocks[key]\r\n            if (block.color == 'default') block.color = this.defaultColor\r\n            if (block.darkenColor == 'default') block.darkenColor = this.defaultDarkenColor\r\n            if (block.indicator == 'default') block.indicator = this.defaultIndicator\r\n            return { name: key, block: block.export(parser, key) }\r\n        })\r\n        exportedBlocks.forEach(block => {\r\n            block.block.neededDynamicDropdown.forEach(dynamicDropdownName => {\r\n                if (!(dynamicDropdownName in neededDynamicDropdowns)) {\r\n                    neededDynamicDropdowns[dynamicDropdownName] = block.block.dynamics[dynamicDropdownName] ? (() => {\r\n                        const value = block.block.dynamics[dynamicDropdownName]()\r\n                        return <[string, string][]> Object.keys(value).map(key => {\r\n                            return [value[key], key]\r\n                        })\r\n                    }) : (() => {\r\n                        return [['대상없음', 'null']]\r\n                    })\r\n                }\r\n            })\r\n            for (const key in block.block.customSkeletons) {\r\n                Entry.skeleton[key] = block.block.customSkeletons[key]\r\n            }\r\n            Entry.block[block.name] = block.block.base\r\n        })\r\n        if (!Entry.container.getDropdownList.__isProxy) {\r\n            Entry.container.getDropdownList = new Proxy(Entry.container.getDropdownList, {\r\n                apply(target, thisArg, args) {\r\n                    if (args[0] in neededDynamicDropdowns) {\r\n                        return neededDynamicDropdowns[args[0]].call(thisArg)\r\n                    }\r\n                    return target.apply(thisArg, args)\r\n                },\r\n                get(target, prop, receiver) {\r\n                    if (prop == '__isProxy') {\r\n                        return true\r\n                    }\r\n                    return Reflect.get(target, prop, receiver)\r\n                }\r\n            })\r\n        }\r\n        if (Entry.getMainWS()) {\r\n            document.querySelector(`#EntLib_Category_${this.id}`)?.remove()\r\n            const styleElement = document.createElement('style')\r\n            styleElement.innerHTML = `\r\n                #entryCategory${this.id} {\r\n                        background-repeat: no-repeat !important;\r\n                        background-color: ${this.disabledColor};\r\n                        background-image: url(${this.disabledIcon});\r\n                        border-color: ${this.disabledColor};\r\n                }\r\n                .entrySelectedCategory#entryCategory${this.id} {\r\n                        background-repeat: no-repeat !important;\r\n                        background-color: ${this.enabledColor} !important;\r\n                        background-image: url(${this.enabledIcon}) !important;\r\n                        border-color: ${this.enabledColor} !important;\r\n                        color: white !important;\r\n                }\r\n            `.replace(/    /gi, '').replace(/\\n/g, '')\r\n            document.head.appendChild(styleElement)\r\n            Entry.playground.mainWorkspace.blockMenu._clearCategory()\r\n            Entry.playground.mainWorkspace.blockMenu._generateCategoryView([\r\n                { category: 'start', visible: true },\r\n                { category: 'flow', visible: true },\r\n                { category: 'moving', visible: true },\r\n                { category: 'looks', visible: true },\r\n                { category: 'brush', visible: true },\r\n                { category: 'text', visible: true },\r\n                { category: 'sound', visible: true },\r\n                { category: 'judgement', visible: true },\r\n                { category: 'calc', visible: true },\r\n                { category: 'variable', visible: true },\r\n                { category: 'func', visible: true },\r\n                { category: 'analysis', visible: true },\r\n                { category: 'ai_utilize', visible: true },\r\n                { category: 'expansion', visible: true },\r\n            ].concat(\r\n                ...[...extensions].map(extension => ({ category: extension.id, visible: true }))\r\n            ).concat({ category: 'arduino', visible: true }))\r\n            document.querySelectorAll('.entryCategoryElementWorkspace').forEach(element => {\r\n                if (element.getAttribute('id') != 'entryCategorytext') element.setAttribute('class', 'entryCategoryElementWorkspace')\r\n            })\r\n            Entry.playground.blockMenu._categoryData = EntryStatic.getAllBlocks()\r\n            Entry.playground.blockMenu._generateCategoryCodes([\r\n                'start',\r\n                'flow',\r\n                'moving',\r\n                'looks',\r\n                'brush',\r\n                'text',\r\n                'sound',\r\n                'judgement',\r\n                'calc',\r\n                'variable',\r\n                'func',\r\n                'analysis',\r\n                'ai_utilize',\r\n                'expansion',\r\n            ].concat(...[...extensions].map(extension => extension.id)).concat('arduino'))\r\n            extensions.forEach(extension => {\r\n                (<HTMLElement> document.querySelector(`#entryCategory${extension.id}`)).innerText = extension.displayName\r\n            })\r\n        }\r\n    }\r\n\r\n    public static allExtensionsLoaded() {\r\n        Entry.FieldLineBreak.prototype.align = function (targetStatementIndex: number) {\r\n            const bv = this._blockView\r\n            if (bv._statements.length === 0) return\r\n            if (!bv._statements[targetStatementIndex]) return\r\n            this.box.set({\r\n                y:\r\n                    bv._statements.slice(0, targetStatementIndex).reduce((acc: number, cur: any) => acc += Math.max(cur.height, 20), 0)\r\n                    + (bv._statements[targetStatementIndex].height || 20) + (28 * (targetStatementIndex + 1))\r\n            })\r\n        }\r\n        if (Entry.getMainWS()) {\r\n            if (Entry.projectId) {\r\n                if (!ProjectLoader.running) {\r\n                    ProjectLoader.run().then(() => {\r\n                        if (!IconFixer.running) IconFixer.run()\r\n                        if (!EventManager.running) EventManager.run()\r\n                    })\r\n                }\r\n            } else {\r\n                if (!IconFixer.running) IconFixer.run()\r\n                if (!EventManager.running) EventManager.run()\r\n            }\r\n        } else {\r\n            if (!EventManager.running) EventManager.run()\r\n        }\r\n    }\r\n\r\n    public static hideClass(className: string) {\r\n        if (Entry.getMainWS()) Entry.getMainWS().blockMenu.banClass(className)\r\n    }\r\n\r\n    public static showClass(className: string) {\r\n        if (Entry.getMainWS()) Entry.getMainWS().blockMenu.unbanClass(className)\r\n    }\r\n}","import { Block } from './Block'\r\nimport { IndicatorType, Parser, SyntaxCode, SyntaxTree } from './Parser'\r\n\r\nexport interface EventBlockParam {\r\n    template: string\r\n    className?: string\r\n    color?: string\r\n    darkenColor?: string\r\n    dynamics?: { [key: string]: any }\r\n    indicator?: string\r\n    eventName: string\r\n}\r\n\r\nexport class EventBlock extends Block {\r\n    public eventName: string\r\n\r\n    constructor({\r\n        template,\r\n        color = 'default',\r\n        darkenColor = 'default',\r\n        className = 'default',\r\n        dynamics = {},\r\n        indicator = 'default',\r\n        eventName\r\n    }: EventBlockParam) {\r\n        super({ template, color, darkenColor, className, dynamics, indicator, action: () => { } })\r\n        this.eventName = eventName\r\n    }\r\n\r\n    public export(parser: Parser, name: string) {\r\n        const syntaxTree = parser.parse(this.template)\r\n        const params = <SyntaxTree[]> syntaxTree.content.filter(l => typeof l != 'string')\r\n        const getParams = (script: any) => params.reduce((acc, cur) => {\r\n            const keyName = <string> cur.content[0]\r\n            if (cur.type == SyntaxCode.CONDITION) acc[keyName] = script.getBooleanValue(keyName.toUpperCase(), script)\r\n            if (cur.type == SyntaxCode.DROPDOWN) acc[keyName] = script.getField(keyName.toUpperCase(), script)\r\n            if (cur.type == SyntaxCode.PARAM) acc[keyName] = script.getStringValue(keyName.toUpperCase(), script)\r\n            return acc\r\n        }, <{ [key: string]: any }> {})\r\n        const ret = parser.syntaxTreeToBlock({\r\n            name,\r\n            className: this.className,\r\n            color: this.color,\r\n            outline: this.darkenColor,\r\n            darkenColor: this.darkenColor,\r\n            action: () => { },\r\n            indicator: this.indicator == 'none' ? undefined : this.indicator,\r\n            indicatorType: IndicatorType.EVENT,\r\n            event: this.eventName\r\n        }, syntaxTree)\r\n        return {\r\n            ...ret, dynamics: Object.keys(this.dynamics).reduce((acc, cur) => {\r\n                acc[cur.toLowerCase()] = this.dynamics[cur]\r\n                return acc\r\n            }, <{ [key: string]: any }> {})\r\n        }\r\n    }\r\n}","import { Parser } from \"./Parser\"\r\nimport { Block } from \"./Block\"\r\nimport { executeAction, Action } from \"./Action\"\r\n\r\nexport interface ButtonParam {\r\n    template: string\r\n    textColor: string\r\n    action: Action\r\n    align: 'center' | 'left' | 'right'\r\n}\r\n\r\nexport class Button extends Block {\r\n    public align: 'center' | 'left' | 'right'\r\n\r\n    constructor({\r\n        template,\r\n        textColor = 'default',\r\n        action,\r\n        align = 'center'\r\n    }: ButtonParam) {\r\n        super({\r\n            template,\r\n            color: textColor,\r\n            action\r\n        })\r\n        this.align = align\r\n    }\r\n\r\n    public export(parser: Parser, name: string) {\r\n        const ret = parser.parseButton({\r\n            textColor: this.color,\r\n            text: this.template,\r\n            align: this.align,\r\n            action: async (event: any) => {\r\n                return await executeAction(this.action, null, null, { event })\r\n            },\r\n            name,\r\n            className: this.className,\r\n        })\r\n\r\n        return {\r\n            ...ret,\r\n            dynamics: {}\r\n        }\r\n    }\r\n}","const sel = <K extends keyof HTMLElementTagNameMap = 'div'>(selector: string) => {\r\n    return document.querySelector(selector) as HTMLElementTagNameMap[K] | null\r\n}\r\n\r\nlet id: string = 'null'\r\n\r\nif (Entry.getMainWS()) {\r\n    sel('.popup')!.style.display = 'none'\r\n    Entry.Command[1103].do()\r\n\r\n    const nid = sel('.popup')!.children[0].className.replace('popup_wrap__', '')\r\n    id = nid\r\n\r\n    sel(`.btn_back__${id}`)!.click()\r\n    sel('.popup')!.style.display = ''\r\n}\r\n\r\nexport type ModalEventListener = (modal: Modal, selectedItems: ModalItem[]) => void\r\n\r\nexport interface ModalButton {\r\n    text: string,\r\n    type: 'confirm' | 'normal',\r\n    onClick: ModalEventListener\r\n}\r\n\r\nexport interface ModalParams1 {\r\n    title: string\r\n    alertMessage?: string\r\n    confirmText: string\r\n    onConfirm: ModalEventListener\r\n    onCancel?: ModalEventListener\r\n    items?: ModalItem[]\r\n}\r\n\r\nexport interface ModalParams2 {\r\n    title: string\r\n    alertMessage?: string\r\n    buttons: ModalButton[]\r\n    onCancel?: ModalEventListener\r\n    items?: ModalItem[]\r\n}\r\n\r\nexport interface ModalParams3 {\r\n    title: string\r\n    alertMessage?: string\r\n    confirmText: string\r\n    cancelText: string\r\n    onConfirm: ModalEventListener\r\n    onCancel: ModalEventListener\r\n    items?: ModalItem[]\r\n}\r\n\r\nconst defaultDOM = `\r\n<div class=\"popup_wrap__${id}\">\r\n<header class=\"pop_header__${id}\">\r\n   <h1>{TITLE}</h1>\r\n   <button class=\"btn_back__${id} imbtn_pop_back__${id}\"><span class=\"blind__${id}\">Menus.history_back</span></button>\r\n</header>\r\n<section class=\"extend_content__${id} pop_content__${id}\">\r\n   <div class=\"section_cont__${id}\">\r\n      <h2 class=\"blind__${id}\">BIG ICON LIST</h2>\r\n      <div class=\"cont_box__${id}\">\r\n         <div class=\"desc__${id}\">\r\n            <div class=\"imico_exclamation_mark__${id}\"></div>\r\n            <div class=\"content__${id}\">{ALERT_MESSAGE}</div>\r\n         </div>\r\n         <div class=\"extend_block__${id}\">\r\n            <ul class=\"list__${id}\"></ul>\r\n         </div>\r\n      </div>\r\n   </div>\r\n</section>\r\n<div class=\"pop_btn_box__${id}\"></div>\r\n</div>`.trim()\r\n\r\nconst defaultItemDOM = `\r\n<li>\r\n   <div class=\"link__${id}\">\r\n      <div class=\"thmb__${id}\" style=\"background-image: url({BACKGROUND_IMAGE}); background-repeat: no-repeat; position: relative;\">\r\n         <div class=\"sponser_text__${id}\"><span class=\"sponser_text_span__${id}\">{SPONSER_MESSAGE}</span></div>\r\n      </div>\r\n      <div class=\"inner_box__${id}\">\r\n         <strong class=\"sjt__${id}\">{TITLE}</strong>\r\n         <div class=\"dsc__${id}\">{DESCRIPTION}</div>\r\n      </div>\r\n   </div>\r\n</li>`.trim()\r\n\r\nconst parseDOM = <K extends keyof HTMLElementTagNameMap>(h: string) => {\r\n    return new DOMParser().parseFromString(h, 'text/html').body.childNodes[0] as HTMLElementTagNameMap[K]\r\n}\r\n\r\nexport interface ItemParams {\r\n    title: string\r\n    description: string\r\n    image: string\r\n    sponserMessage?: string\r\n}\r\n\r\nexport class ModalItem {\r\n    protected pSelected: boolean = false\r\n    protected domElement: HTMLLIElement\r\n\r\n    public readonly title: string\r\n    public readonly description: string\r\n    public readonly image: string\r\n    public readonly sponserMessage: string | null\r\n\r\n    constructor({ title, description, image, sponserMessage }: ItemParams) {\r\n        if (!Entry.getMainWS()) throw new Error('Modal is only available in ws-mode')\r\n\r\n        this.title = title\r\n        this.image = image\r\n        this.description = description\r\n        this.sponserMessage = sponserMessage ?? null\r\n\r\n        this.domElement = parseDOM<'li'>(defaultItemDOM\r\n            .replace('{TITLE}', title)\r\n            .replace('{DESCRIPTION}', description)\r\n            .replace('{BACKGROUND_IMAGE}', image)\r\n            .replace('{SPONSER_MESSAGE}', sponserMessage ?? '')\r\n        )\r\n\r\n        this.domElement.addEventListener('click', () => {\r\n            this.selected = !this.selected\r\n        })\r\n\r\n        if (!this.sponserMessage) this.domElement.querySelector<HTMLDivElement>(`.sponser_text__${id}`)!.style.display = 'none'\r\n    }\r\n\r\n    public getDOMElement() {\r\n        return this.domElement\r\n    }\r\n\r\n    set selected(v: boolean) {\r\n        if (v) this.domElement.classList.add(`on__${id}`)\r\n        else this.domElement.classList.remove(`on__${id}`)\r\n        this.pSelected = v\r\n    }\r\n\r\n    get selected() {\r\n        return this.pSelected\r\n    }\r\n}\r\n\r\nexport class Modal {\r\n    protected pIsDestroyed: boolean = false\r\n    protected domElement: HTMLDivElement\r\n\r\n    public readonly title: string = ''\r\n    public readonly buttons: ModalButton[] = []\r\n    public readonly alertMessage: string | null = null\r\n    public readonly items: ModalItem[] = []\r\n    public readonly onCancel: ModalEventListener | null = null\r\n\r\n    constructor(p: ModalParams1)\r\n    constructor(p: ModalParams2)\r\n    constructor(p: ModalParams3)\r\n    constructor({ title, alertMessage, confirmText, cancelText, onConfirm, onCancel, buttons, items }: any) {\r\n        if (!Entry.getMainWS()) throw new Error('Modal is only available in ws-mode')\r\n\r\n        this.onCancel = onCancel ?? null\r\n\r\n        if (buttons) {\r\n            this.buttons = buttons\r\n        } else {\r\n            const arr: ModalButton[] = [{\r\n                text: confirmText,\r\n                type: 'confirm',\r\n                onClick: onConfirm\r\n            }]\r\n\r\n            if (cancelText) arr.push({\r\n                text: cancelText,\r\n                type: 'normal',\r\n                onClick: onCancel\r\n            })\r\n\r\n            this.buttons = arr\r\n        }\r\n\r\n        this.title = title\r\n        this.alertMessage = alertMessage ?? null\r\n        this.items = items ?? []\r\n\r\n        this.domElement = parseDOM<'div'>(defaultDOM\r\n            .replace('{TITLE}', title)\r\n            .replace('{ALERT_MESSAGE}', this.alertMessage ?? '')\r\n        )\r\n\r\n        if (!this.alertMessage) this.domElement.querySelector<HTMLDivElement>(`.desc__${id}`)!.style.display = 'none'\r\n\r\n        const buttonContainer = this.domElement.querySelector<HTMLDivElement>(`.pop_btn_box__${id}`)!\r\n\r\n        this.domElement.querySelector<HTMLDivElement>(`btn_back__${id}`)!.addEventListener('click', () => {\r\n            if (this.onCancel) {\r\n                this.onCancel(this, this.items.filter(item => item.selected))\r\n            } else {\r\n                this.destroy()\r\n            }\r\n        })\r\n\r\n        this.buttons.forEach(btn => {\r\n            const elem = document.createElement('a')\r\n\r\n            elem.addEventListener('click', () => {\r\n                btn.onClick(this, this.items.filter(item => item.selected))\r\n            })\r\n\r\n            if (btn.type == 'confirm') elem.classList.add(`active__${id}`)\r\n\r\n            elem.innerText = btn.text\r\n\r\n            buttonContainer.appendChild(elem)\r\n        })\r\n    }\r\n\r\n    public addItems(...items: ModalItem[]) {\r\n        if (this.isDestroyed) throw new Error('Modal destroyed')\r\n        this.items.push(...items)\r\n    }\r\n\r\n    public show() {\r\n        if (this.isDestroyed) throw new Error('Modal destroyed')\r\n\r\n        const itemContainer = this.domElement.querySelector<HTMLUListElement>(`.list__${id}`)!\r\n\r\n        itemContainer.innerHTML = ''\r\n\r\n        this.items.forEach(item => {\r\n            itemContainer.appendChild(item.getDOMElement())\r\n        })\r\n\r\n        sel('.popup')!.appendChild(this.domElement)\r\n\r\n        sel('.modal')!.style.display = 'block'\r\n        this.domElement.style.display = ''\r\n    }\r\n\r\n    public hide() {\r\n        if (this.isDestroyed) throw new Error('Modal destroyed')\r\n        sel('.modal')!.style.display = 'none'\r\n        this.domElement.style.display = 'none'\r\n    }\r\n\r\n    public destroy() {\r\n        this.pIsDestroyed = true\r\n        this.domElement.remove()\r\n    }\r\n\r\n    public get isDestroyed() {\r\n        return this.pIsDestroyed\r\n    }\r\n}","export * from './Block'\r\nexport * from './Parser'\r\nexport * from './Extension'\r\nexport * from './Action'\r\nexport * from './IconFixer'\r\nexport * from './EventBlock'\r\nexport * from './EventManager'\r\nexport * from './Statements'\r\nexport * from './Button'\r\nexport * from './Modal'\r\n\r\ndeclare global {\r\n    interface Window {\r\n        EntLib: any\r\n    }\r\n}\r\n\r\nif (window) {\r\n    window.EntLib = module.exports\r\n}"]}